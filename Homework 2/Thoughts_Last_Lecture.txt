 Overall, I thought he did an interesting job recapping his life and using jokes and lighter anecdotes to demonstrate more serious concepts. 
 He brought up some interesting points about things that happened during his professional life, but I don’t have the context and professional experiences to relate to some of what he was saying.
 I really related to his segment on approaching learning coding through a fun activity as I do find it a lot easier to learn things when it’s fun rather than if it is dry or overcomplicated in a way that is not fun, just frustrating. 
 For comparison, if I have a puzzle to resolve in a game versus a puzzle that is not in a game, the game-puzzle is more fun to figure out, which also helps me to remember it better.
 In large part, the ones that set it up as a game, also set it up to figure out how to reach the answer more easily, but the ones that have it set up not as a game, also tend to leave you flailing much longer (or forever) and it can lead to frustration.
 I appreciated the observation he made about teams, where he could tell from the cohesion of the team members whether their product would “work” or not.  Working in a team can allow people to focus on the bits they are better at and get more work done.  Because they can get more work done, they are able to take on larger and more impressive tasks.
 Some team projects I’ve worked on, were successful only when the entire team was working together and functional it was pretty fun and we were able to get something good done, but where the team wasn’t meshing, it was frustrating and stressful and I would have gotten more accomplished working alone.